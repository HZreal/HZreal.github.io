<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on {码途轨迹} - 发现问题，分享解决.</title>
    <link>https://www.angularcorp.com/zh/tool/</link>
    <description>Recent content in Tools on {码途轨迹} - 发现问题，分享解决.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://www.angularcorp.com/zh/tool/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://www.angularcorp.com/zh/tool/discuzq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.angularcorp.com/zh/tool/discuzq/</guid>
      <description>discuz!Q 简介 快速搭建个人社区
doc： https://discuz.com/
api： https://developer.discuz.chat/#/api/get:_api_v3_check.user.get.redpacket
安装 linux下，推荐docker安装 https://discuz.com/docs/Linux%20%E4%B8%BB%E6%9C%BA.html
安装启动容器命令 docker run -d --restart=always -p 20080:80 -p 20443:443 -v ~/discuzQ/data/discuz:/var/lib/discuz -v ~/discuzQ/data/mysql-data:/var/lib/mysqldb -v ~/discuzQ/data/certs:/etc/nginx/certs ccr.ccs.tencentyun.com/discuzq/dzq:latest 初始化安装 Discuz! Q 访问 http://ip:port/install 并配置网站相关信息。
配置mysql ip 用户名密码 配置后台用户名密码admin admin123456 使用 安装后，访问即可，一个社区就出现啦！可以注册咯
http://ip:20080/
https://ip:20443/
后台站点访问，用户名admin密码admin123456
http://ip:20080/admin
https://ip:20443/admin/</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.angularcorp.com/zh/tool/docsify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.angularcorp.com/zh/tool/docsify/</guid>
      <description>docsify https://docsify.js.org/#/
安装
npm i docsify-cli -g 搭建项目
docsify init ./docs 启动
docsify serve .\docs\ </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.angularcorp.com/zh/tool/git-commits-specification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.angularcorp.com/zh/tool/git-commits-specification/</guid>
      <description>Conventional Commits：让您的Git历史更加清晰和有意义 引言 在软件开发中，良好的版本控制实践是维持项目健康和可持续发展的关键。一个清晰、一致的提交历史不仅可以加强团队合作，还能提高代码的可维护性。本文将介绍 Conventional Commits 规范，一种帮助您实现这一目标的提交信息格式规范。
什么是 Conventional Commits？ Conventional Commits 是一个轻量级的、社区驱动的提交信息格式规范。它的核心目的是使提交信息更加可读和易于理解。遵循这一规范，可以让您的 Git 历史成为一个清晰的故事，而不仅仅是代码的变更记录。
核心要点 清晰的类型定义：规定了一系列预定义的提交类型，如 feat, fix, docs, 等，每种类型对应不同的代码更改目的。 可选的范围：允许在提交类型后指定影响范围，增加了额外的上下文信息。 描述性的消息：鼓励编写简短且具有描述性的信息，概括提交的主要内容。 如何使用 Conventional Commits？ 使用 Conventional Commits 的基本格式如下：
markdownCopy code &amp;lt;type&amp;gt;[optional scope]: &amp;lt;description&amp;gt; [optional body] [optional footer] 提交类型（Types） feat：新功能 fix：修复 Bug docs：文档更新 style：代码样式调整（不影响代码运行） refactor：代码重构 perf：性能提升 test：测试相关 chore：日常琐事（如依赖管理） 示例 gitCopy code feat(auth): 添加 JWT 认证支持 - 实现 JWT 生成和验证 - 更新认证中间件以支持 JWT 关闭问题 #123 在这个示例中，feat 表明这是一个添加新功能的提交，auth 是这次更改的范围，后面紧跟着的是对提交内容的简短描述。接着是一个更详细的解释，最后是相关问题链接。
Conventional Commits 的好处 提高可读性：清晰的提交历史使新团队成员更容易理解项目进展。 自动化工具友好：可以被用于自动化生成变更日志和版本控制。 改善协作流程：明确的提交类型和格式有助于代码审查和团队协作。 结语 Conventional Commits 规范为软件开发提供了一种简单而高效的提交历史管理方法。它的简洁性和自解释性使得项目维护变得更加容易。采纳这一规范，将为您的项目带来长期的好处。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.angularcorp.com/zh/tool/git%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.angularcorp.com/zh/tool/git%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83/</guid>
      <description>引言 在软件开发中，良好的版本控制实践是维持项目健康和可持续发展的关键。一个清晰、一致的提交历史不仅可以加强团队合作，还能提高代码的可维护性。本文将介绍 Conventional Commits 规范，一种帮助您实现这一目标的提交信息格式规范。
什么是 Conventional Commits？ Conventional Commits 是一个轻量级的、社区驱动的提交信息格式规范。它的核心目的是使提交信息更加可读和易于理解。遵循这一规范，可以让您的 Git 历史成为一个清晰的故事，而不仅仅是代码的变更记录。
可参考链接：https://www.conventionalcommits.org
核心要点 清晰的类型定义：规定了一系列预定义的提交类型，如 feat, fix, docs, 等，每种类型对应不同的代码更改目的。 可选的范围：允许在提交类型后指定影响范围，增加了额外的上下文信息。 描述性的消息：鼓励编写简短且具有描述性的信息，概括提交的主要内容。 如何使用 Conventional Commits？ 使用 Conventional Commits 的提交注释基本格式如下：
&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;description&amp;gt; &amp;lt;body&amp;gt; &amp;lt;footer&amp;gt; 格式描述如下：
&amp;lt;type&amp;gt;：提交类型，用于说明本次提交的类别，常见类型包括： feat：新功能 fix：修复 Bug docs：文档更新 style：代码风格样式调整（不影响代码运行） refactor：代码重构 perf：性能提升（performance的缩写） test：测试相关 chore：其他无关紧要的改动（单词是琐事的意思） (&amp;lt;scope&amp;gt;)：可选，用于进一步细化提交类型，例如 feat(login) 表示登录功能的新功能。 &amp;lt;subject&amp;gt;：简短描述本次提交的主要内容，建议不超过 50 个字符。 &amp;lt;body&amp;gt;：可选，提供更详细的提交描述，可以包含以下内容： 修改原因 修改内容 影响范围 相关测试 &amp;lt;footer&amp;gt;：可选，包含额外的元信息，例如： 关联的 Jira 问题编号 提交者 评审者 示例 feat(auth): 添加 JWT 认证支持 - 实现 JWT 生成和验证 - 更新认证中间件以支持 JWT 关闭问题 #123 在这个示例中， feat 表明这是一个添加新功能的提交，auth 是这次更改的范围，后面紧跟着的description是对提交内容的简短描述。 接着body是一个更详细的解释。 最后footer是相关问题的结果。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.angularcorp.com/zh/tool/hexo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.angularcorp.com/zh/tool/hexo/</guid>
      <description>Hexo framework based on node.js
官网： https://hexo.io
doc：https://hexo.io/docs/
简单教程： 【bilibii】 https://b23.tv/xyiGVIV
安装 npm install -g hexo-cli 创建自己的blog项目 hexo init blog 博客文件存放路径 source/_posts，将自己平时的md文件放入其中即可
设置主题 默认的主题比较单调，可官网查找合适主题安装
doc： https://hexo.io/themes/
主题存放路径 themes/
使主题生效 修改_config.yml文件，设置theme为你的主题名称（下载在themes目录下的目录名，具体看主题使用说明）
例如ayer主题的使用说明
https://github.com/Shen-Yu/hexo-theme-ayer</description>
    </item>
    
  </channel>
</rss>
