<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gRPC on {码途轨迹} - 发现问题，分享解决.</title>
    <link>https://hzreal.github.io/zh/tags/grpc/</link>
    <description>Recent content in gRPC on {码途轨迹} - 发现问题，分享解决.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 08 Jan 2025 09:32:11 +0800</lastBuildDate><atom:link href="https://hzreal.github.io/zh/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gRPC 介绍</title>
      <link>https://hzreal.github.io/zh/tech/grpc-%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</link>
      <pubDate>Wed, 08 Jan 2025 09:32:11 +0800</pubDate>
      
      <guid>https://hzreal.github.io/zh/tech/grpc-%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</guid>
      <description>gRPC 四种模式及应用场景 在 gRPC 中，RPC 调用模式有四种，每种模式适用于不同的业务场景。下面将详细分析这四种模式及其对应的应用场景。
参考官方文档概念：https://grpc.io/docs/what-is-grpc/core-concepts
1. 简单 RPC (Unary RPC) 模式描述 客户端发送一个请求，服务端返回一个响应。双方的通信都是一次性的。
类似于传统的 HTTP 请求-响应模型。
应用场景 查询服务：客户端请求一些数据，服务端根据请求参数返回一个结果。比如获取用户信息、查询订单状态等。 简单的计算服务：客户端传入参数，服务端执行计算后返回结果，比如加法、减法、获取某个 ID 的计算结果等。 无需复杂交互的任务：单次请求即能获得结果的场景，如调用支付接口、获取天气数据等。 示例 rpc GetUserInfo(UserRequest) returns (UserResponse); 2. 服务端流式 RPC (Server Streaming RPC) 模式描述 客户端发送一个请求，服务端返回一个响应流。客户端接收服务端的多个响应数据，直到服务端发送完所有数据。
应用场景 分页或批量获取数据：客户端需要从服务端获取大量数据时，通过流的方式接收数据，不需要一次性加载完所有数据，比如数据导出或查询日志。
实时数据推送：适合服务端需要不断推送数据给客户端的场景，比如股票行情、实时天气更新、监控数据等。
文件下载：客户端请求文件，服务端以数据块形式流式返回文件内容。
示例 rpc GetLogStream(LogRequest) returns (stream LogEntry); 3. 客户端流式 RPC (Client Streaming RPC) 模式描述 客户端发送一个流请求，服务端接收所有请求后返回一个响应。客户端可以分批次将数据流发送到服务端。
应用场景 批量数据上传: 客户端分批次发送数据到服务端，如文件分块上传、日志批量上传等。
传感器数据采集: 客户端持续收集传感器的数据，并将其流式发送至服务端进行处理。
数据聚合: 客户端发送多个值，服务端处理后返回汇总结果，如计算平均值、订单总金额等。
示例 rpc UploadLogStream(stream LogEntry) returns (UploadStatus); 4. 双向流式 RPC (Bidirectional Streaming RPC) 模式描述 客户端和服务端都可以通过流的方式不断发送和接收消息。双方可以并发地发送和接收消息，且不需要等待对方完成发送。</description>
    </item>
    
  </channel>
</rss>
